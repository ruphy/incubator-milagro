"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8145],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>b});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,b=m["".concat(p,".").concat(d)]||m[d]||s[d]||o;return n?r.createElement(b,i(i({ref:t},c),{},{components:n})):r.createElement(b,i({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5797:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>d,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"mpc-api-0.1",title:"Multi-Party Computation (MPC) Library 0.1 (libmpc)",sidebar_label:"Multi-Party Computation Library 0.1"},p=void 0,u={unversionedId:"mpc-api-0.1",id:"mpc-api-0.1",title:"Multi-Party Computation (MPC) Library 0.1 (libmpc)",description:"Apache Milagro's Multi-Party Computation library (libmpc) is the latest addition to the project (as of June 2022), and uses the Apache Milagro C Library to implement Multi-Party Computation. It offers and API to allow for customs computations to be perfomed.",source:"@site/../docs/mpc-api-0.1.md",sourceDirName:".",slug:"/mpc-api-0.1",permalink:"/docs/mpc-api-0.1",draft:!1,tags:[],version:"current",frontMatter:{id:"mpc-api-0.1",title:"Multi-Party Computation (MPC) Library 0.1 (libmpc)",sidebar_label:"Multi-Party Computation Library 0.1"},sidebar:"docs",previous:{title:"Authentication",permalink:"/docs/dta-details/authentication"},next:{title:"ZKP-MFA Overview",permalink:"/docs/zkp-mfa-overview"}},c={},m=[{value:"Building and running libmpc",id:"building-and-running-libmpc",level:2},{value:"API Documentation",id:"api-documentation",level:2}],s={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Apache Milagro's Multi-Party Computation library (libmpc) is the latest addition to the project (as of June 2022), and uses the ",(0,o.kt)("a",{parentName:"p",href:"/docs/amcl-c-api-2.0.0"},"Apache Milagro C Library")," to implement Multi-Party Computation. It offers and API to allow for customs computations to be perfomed."),(0,o.kt)("h2",{id:"building-and-running-libmpc"},"Building and running libmpc"),(0,o.kt)("p",null,"The preferred way to get libmpc built and tested is through the use of docker."),(0,o.kt)("p",null,"Once your docker installation is correctly set-up, simply run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\n git clone https://github.com/apache/incubator-milagro-MPC.git && cd incubator-milagro-MPC\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\n docker build -t libmpc .\n\n")),(0,o.kt)("p",null,"If you want to run tests and ensure all routines perform as expected, run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\ndocker run --cap-add SYS_PTRACE --rm libmpc\n\n")),(0,o.kt)("p",null,"This procedure has been tested on all major platforms (Linux, Mac OS, Windows) on arm64 and x86_64 platforms. If your build or execution fails, please open a bug."),(0,o.kt)("p",null,"You can also build and run libmpc natively, and you can build the docker image for multiple platforms. To know more, check out ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apache/incubator-milagro-MPC"},"the readme in the GitHub repository"),"."),(0,o.kt)("h2",{id:"api-documentation"},"API Documentation"),(0,o.kt)("p",null,"Doxygen support is available for Apache Milagro Multi-Party Computation (MPC) Library."),(0,o.kt)("p",null,"If you build libmpc, you can generate the documentation by running"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\nmake doc\n\n")),(0,o.kt)("p",null,"in the build directory. If you use Docker, and you want the build to generate the documentation, make sure ",(0,o.kt)("inlineCode",{parentName:"p"},"build_doc")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("p",null,"An online version of the Doxygen output is available for viewing in a web browser ",(0,o.kt)("a",{href:"/mpcdocs/index.html",target:"_blank"},"here"),"."),(0,o.kt)("p",null,"Supported admonition types are: caution, note, important, tip, warning."))}d.isMDXComponent=!0}}]);